"""
Django settings for chatbot project.

Generated by 'django-admin startproject' using Django 5.1.5.
"""

import os
import sys
from pathlib import Path
from dotenv import load_dotenv
from urllib.parse import urlparse

# Define base directory of the backend (where settings.py is located)
BASE_DIR = Path(__file__).resolve().parent.parent

# Define the path to the .env file (outside the backend directory)
ENV_PATH = BASE_DIR.parent / ".env"

# Load environment variables from the .env file
load_dotenv(ENV_PATH)

SECRET_KEY = os.getenv("SECRET_KEY", "django-insecure-fallback-secret-key")

DEBUG = os.getenv("DEBUG", "True") == "True"


INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "pgvector.django",
    "rest_framework",
    "corsheaders", 
    "chatbot", 
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",  # CORS middleware
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "chatbot.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],  # Add templates directory
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "chatbot.wsgi.application"

# Database configuration using Neon PostgreSQL
DATABASE_URL = os.getenv("DATABASE_URL")
if DATABASE_URL:
    parsed_db_url = urlparse(DATABASE_URL)
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": parsed_db_url.path.lstrip("/"),
            "USER": parsed_db_url.username,
            "PASSWORD": parsed_db_url.password,
            "HOST": parsed_db_url.hostname,
            "PORT": parsed_db_url.port or "5432",
            "OPTIONS": {
                "sslmode": "require",  # Required for Neon PostgreSQL
            },
        }
    }
else:
    raise ValueError("DATABASE_URL is not set in the .env file.")

# Ensure pgvector is available in the database
PGVECTOR_EXTENSION_INSTALLED = os.getenv("PGVECTOR_EXTENSION_INSTALLED", "False") == "True"

if PGVECTOR_EXTENSION_INSTALLED:
    DATABASES["default"]["ENGINE"] = "pgvector.django"

# Cohere API Key
COHERE_API_KEY = os.getenv("COHERE_API_KEY")
if not COHERE_API_KEY:
    raise ValueError("COHERE_API_KEY is required in .env file.")

# Authentication & Password Validation
AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

# Internationalization
LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = True

# Static files
STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / "staticfiles"

# CORS settings (allow frontend requests)
CORS_ALLOW_ALL_ORIGINS = True  # Allow all origins (change this for production)

# Default primary key field type
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

ALLOWED_HOSTS = [
    "127.0.0.1",
    "localhost",
    "0.0.0.0",
]











